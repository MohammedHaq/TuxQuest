        -:    0:Source:src/locations.c
        -:    0:Graph:tuxquest.gcno
        -:    0:Data:tuxquest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdbool.h>
        -:    2:#include"utils.h"
        -:    3:#include"stats.h"
        -:    4:#include"locations.h"
        -:    5:
        3:    6:enum TownOption readTownOption (char resp[50]) {
        3:    7:	if (strncmp(resp, "rest", 5) == 0) {
        1:    8:		return rest;
        2:    9:	} else if (strncmp(resp, "sell", 5) == 0) {
    #####:   10:		return sell;
        2:   11:	} else if (strncmp(resp, "atk", 4) == 0) {
    #####:   12:		return atk;
        2:   13:	} else if (strncmp(resp, "def", 4) == 0) {
        1:   14:		return def;
        1:   15:	} else if (strncmp(resp, "leave", 4) == 0) {
        1:   16:		return leave;
        -:   17:	} else {
    #####:   18:		return -1;
        -:   19:	}
        -:   20:}
        -:   21:
        -:   22:
        -:   23:
        1:   24:void townLoop (Player *tux) {
        1:   25:	bool inTown = true;
        -:   26:	char response[50];
        -:   27:	enum TownOption resp;
        1:   28:	printf("You arrive in Torvaldia, a small settlement\n");
        1:   29:	printf("in the forest of unmerged branches.\n");
        1:   30:	displayImage("images/town.ascii");
        4:   31:	while (inTown) {
        -:   32:		// get Scenario
        3:   33:		printf("Available actions are: \n");
        3:   34:		printf("- Stay at the Nested Loop Inn (rest) [-10 gold]\n");
        3:   35:		printf("- Flog some loot (sell)\n");
        3:   36:		printf("- Have your beak sharpened (atk) [+1 ATK, -50 gold]\n");
        3:   37:		printf("- Have your feathers fluffed (def) [+1 DEF, -50 gold]\n");
        3:   38:		printf("- Continue your adventure (leave)\n");
        3:   39:		printf(">> ");
        3:   40:		scanf("%50s", response);
        3:   41:		printf("\n");
        3:   42:		resp = readTownOption(response);
        3:   43:		switch (resp) {
        1:   44:			case rest :
        1:   45:				if (tux->gold >= 10) {
        1:   46:					printf("You awake refreshed and ready for battle!\n");
        1:   47:					tux->stats.HP = tux->stats.MAX_HP;
        1:   48:					tux->gold -= 10;
        -:   49:				} else {
    #####:   50:					printf("You can't afford the inn, so you sleep in a smelly\n"); 
    #####:   51:					printf("garbage can, restoring half your health\n");
    #####:   52:					tux->stats.HP += tux->stats.MAX_HP / 2;
    #####:   53:					if (tux->stats.HP > tux->stats.MAX_HP) {
    #####:   54:						tux->stats.HP = tux->stats.MAX_HP;
        -:   55:					}
        -:   56:				}
        1:   57:				break;
    #####:   58:			case sell :
    #####:   59:				printf("Select an item to sell by number : \n");
    #####:   60:				displayInventory(tux->inventory, 0);
    #####:   61:				printf(">> ");
        -:   62:				int item;
    #####:   63:				scanf("%2d", &item);
    #####:   64:				int result = sellItem(item, &(tux->inventory));
    #####:   65:				if (result == -1) {
    #####:   66:					printf("Command Not Recognized!\n");
        -:   67:				} else {
    #####:   68:					printf("Loot Successfully Flogged.\n");
    #####:   69:					printf("Tux gains %d gold!\n", result);
    #####:   70:					tux->gold += result;
        -:   71:				}
    #####:   72:				break;
    #####:   73:			case atk :
    #####:   74:				if (tux->gold >= 50) {
    #####:   75:					printf("The beaksmith sharpens your beak for a modest fee.\n");
    #####:   76:					printf("Attack power increased by 1!\n");
    #####:   77:					tux->stats.ATK += 1;
    #####:   78:					tux->gold -= 50;
        -:   79:				} else {
    #####:   80:					printf("The beaksmith says \"We only serve the economically");
    #####:   81:					printf("advantaged 'round these parts!\"");
        -:   82:				}
    #####:   83:				break;
        1:   84:			case def :
        1:   85:				if (tux->gold >= 50) {
        1:   86:					printf("A featherworker fluffs your feathers for a modest fee.\n");
        1:   87:					printf("Defense power increased by 1!\n");
        1:   88:					tux->stats.DEF += 1;
        1:   89:					tux->gold -= 50;
        -:   90:				} else {
    #####:   91:					printf("The featherworker says \"We only serve the economically");
    #####:   92:					printf("advantaged 'round these parts!\"");
        -:   93:				}
        1:   94:				break;
        1:   95:			case leave:
        1:   96:				printf("You continue your quest!\n");
        1:   97:				inTown = false;
        1:   98:				break;
    #####:   99:			default : 
    #####:  100:				printf("Command Not Recognized!\n"); 
    #####:  101:				break; 
        -:  102:		}	
        -:  103:	}
        1:  104:}
        -:  105:
        -:  106:/**
        -:  107: *
        -:  108: *@param type The area type in which the player is in currently is taken in as a parameter 
        -:  109: *@param *tux An instanct of the player structure is given as a parameter and stores the players current health,max health, XP, Gold, Level, ATK.
        -:  110: *@return The function returns a bool value. if the function were to return true this indicates that the game has been completed. However, if the function does not return true then the game will continue
        -:  111: *
        -:  112: */
        -:  113:
        6:  114:bool runEncounter (enum Area type, Player *tux) {
        -:  115:	Statblock creature;
        6:  116:	switch (type) {
        6:  117:		case camp :
        6:  118:			displayImage("images/goblincamp.ascii");
        6:  119:			printf("\nAs you approach the goblin camp, a goblin\n");
        6:  120:			printf("says something rude about your beak.\n");
        6:  121:			creature = goblin_init;
        6:  122:			displayImage("images/goblin.ascii");
        6:  123:			break;
    #####:  124:		case fort :
    #####:  125:			displayImage("images/orcfort.ascii");
    #####:  126:			printf("\nAs you approach the orc fort, an orc approaches\n");
    #####:  127:			printf("you, warning you the floor is wet as he just mopped.\n");
    #####:  128:			creature = orc_init;
    #####:  129:			displayImage("images/orc.ascii");
    #####:  130:			break;
    #####:  131:		case cave :
    #####:  132:			displayImage("images/dragoncave.ascii");
    #####:  133:			printf("\nAfter a perilous climb through the Mountains of Noob,\n");
    #####:  134:			printf("you come upon it at last... the dragon's lair!\n");
    #####:  135:			printf("The dragon emerges, its ferocity quickened by hunger.\n");
    #####:  136:			creature = dragon_init;
    #####:  137:			displayImage("images/dragon.ascii");
    #####:  138:			break;
    #####:  139:		case town:
    #####:  140:			return false;
        -:  141:	}
        6:  142:	printf("...\nTo the death!!!\n");	
        -:  143:	
       26:  144:	while (tux->stats.HP > 0 && creature.HP > 0) {
       26:  145:	  bool player_turn = true;
       26:  146:	  bool creature_turn = false;
        -:  147:	  int damage; 
       26:  148:	  if (player_turn == true) {
       26:  149:	    damage = 0;
       26:  150:	    damage = tux->stats.ATK - creature.DEF;
       26:  151:	    printf("Tux attacks! %d damage!\n", damage);
       26:  152:	    creature.HP = creature.HP - damage;
       26:  153:	    if (creature.HP <= 0){
        5:  154:	      break;
        -:  155:	    }
       21:  156:	    damage = 0;
       21:  157:	    player_turn = false;
       21:  158:	    creature_turn = true;
        -:  159:	  }
       21:  160:	  if (creature_turn == true) {
       21:  161:	    damage = 0;
       21:  162:	    damage = creature.ATK - tux->stats.DEF;
       21:  163:	    printf("The %s attacks! %d damage!", creature.NAME, damage);
       21:  164:	    tux->stats.HP = tux->stats.HP - damage;
       21:  165:	    if (tux->stats.HP <= 0){
        1:  166:	      break;
        -:  167:	    }
       20:  168:	    damage = 0;
       20:  169:	    creature_turn = false;
       20:  170:	    player_turn = true;
        -:  171:	  }
        -:  172:	}
        6:  173:	if (tux ->stats.HP <= 0){
        1:  174:	  displayImage("images/death.ascii");
        1:  175:	  exit(0);
        -:  176:	}
        5:  177:	else if (creature.HP <= 0) {
        -:  178:	  int XP,Gold;
        5:  179:	  printf("You emerge victorious!\n");
        5:  180:	  XP = creature.XP;
        5:  181:	  tux->stats.XP = tux->stats.XP + XP;
        5:  182:	  printf("Gained %d XP\n",XP);
        5:  183:	  Gold = XP / 2;
        5:  184:	  tux->gold = tux->gold + Gold;
        5:  185:	  printf("Gained %d Gold\n", Gold);
        5:  186:	  while (tux->stats.XP > 100){
    #####:  187:	    tux->level = tux->level + 1;
    #####:  188:	    tux->stats.MAX_HP = tux->stats.MAX_HP + 5;
    #####:  189:	    tux->stats.HP = tux->stats.MAX_HP;
    #####:  190:	    tux->stats.ATK = tux->stats.ATK + 1;
    #####:  191:	    tux->stats.XP = tux->stats.XP - 100;
        -:  192:	  }
        -:  193:	  
        -:  194:	  
        5:  195:	  switch (type) {
    #####:  196:	    case cave :
    #####:  197:	      return true;
    #####:  198:	    case town:
    #####:  199:	      return false;
    #####:  200:	    case fort:
    #####:  201:	      return false;
        5:  202:	    case camp:
        5:  203:	      return false;
    #####:  204:	    default:
    #####:  205:	      return false;
        -:  206:	    }
        -:  207:	}
    #####:  208:	return false;
        -:  209:}
        -:  210:
        7:  211:enum Area readTravelOption (char resp[50]) {
        7:  212:	if (strncmp(resp, "town", 5) == 0) {
        1:  213:		return town;
        6:  214:	} else if (strncmp(resp, "camp", 5) == 0) {
        6:  215:		return camp;
    #####:  216:	} else if (strncmp(resp, "fort", 5) == 0) {
    #####:  217:		return fort;
    #####:  218:	} else if (strncmp(resp, "cave", 5) == 0) {
    #####:  219:		return cave;
        -:  220:	} else {
    #####:  221:		return -1;
        -:  222:	}
        -:  223:}
        -:  224:
        7:  225:bool travelDispatch (Player *tux) {
        -:  226:	char response[50];
        7:  227:	printf("Available Locations are: \n");
        7:  228:	printf("- Torvaldia Town (town)\n");
        7:  229:	printf("- The Goblin Camp (camp)\n");
        7:  230:	printf("- The Orc's Fortress (fort)\n");
        7:  231:	printf("- The Dragon's Cave (cave)\n");
        7:  232:	printf(">> ");
        7:  233:	scanf("%50s", response);
        7:  234:	printf("\n");
        7:  235:	enum Area resp = readTravelOption(response);
        7:  236:	switch (resp) {
        1:  237:		case town :	
        1:  238:			townLoop(tux);
        1:  239:			break;
        6:  240:		case camp :
        -:  241:		case fort :
        -:  242:		case cave :
        6:  243:			return runEncounter(resp, tux);
    #####:  244:		default :
    #####:  245:		printf("Command Not Recognized!");
        -:  246:	}
        1:  247:	return 0;
        -:  248:}
        -:  249:
